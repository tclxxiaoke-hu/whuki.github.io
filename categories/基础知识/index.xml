<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 on Mason&#39;s Blog</title>
    <link>https://whuki.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 基础知识 on Mason&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 14 Jan 2023 13:30:00 +0800</lastBuildDate><atom:link href="https://whuki.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang内存分析(上)</title>
      <link>https://whuki.github.io/posts/go_pprof_1/</link>
      <pubDate>Sat, 14 Jan 2023 13:30:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/go_pprof_1/</guid>
      <description>Golang内存泄漏（总揽篇） 起因 2023年3月10左右公司服务出现了很频繁的宕机情况，原因查找刻不容缓（还是领导让去搞的，嘿嘿），因此就开</description>
    </item>
    
    <item>
      <title>分布式-CAP</title>
      <link>https://whuki.github.io/posts/distributed_1/</link>
      <pubDate>Sat, 14 Jan 2023 13:30:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/distributed_1/</guid>
      <description>Q: CAP解决了什么？ 问题由来，由于互联网的发展，用户数据的增多，在同一时间登录系统的用户数以亿计，单体的应用不能负载此用户容量，由此产生了分</description>
    </item>
    
    <item>
      <title>redis缓存穿透、击穿、雪崩</title>
      <link>https://whuki.github.io/posts/redis_1/</link>
      <pubDate>Sun, 16 Oct 2022 11:00:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/redis_1/</guid>
      <description>缓存穿透、击穿、雪崩 1.缓存穿透 缓存穿透指缓存和数据库中数据都不存在，这样的缓存永久不存在，最终这些请求全部打到数据库中。 解决方案 1.缓存控</description>
    </item>
    
    <item>
      <title>golang并发编程(二)</title>
      <link>https://whuki.github.io/posts/goroutine_2/</link>
      <pubDate>Wed, 14 Sep 2022 22:00:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/goroutine_2/</guid>
      <description>Go内存模型 请看下面输出什么？ package main var a, b int func f() { a = 1 b = 2 } func g() { print(b) print(a) } func main() { go f() g() } 将这两个函数分为两个步骤: 可能出现的执行情况： 执行顺</description>
    </item>
    
    <item>
      <title>golang并发编程(一)</title>
      <link>https://whuki.github.io/posts/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 07 Sep 2022 22:00:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/golang%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>请对创建的goroutine负责 本篇作为并发编程学习的开篇，依次会讲解golang并发编程的各个使用方式以及各种常见的坑。 创建gorouti</description>
    </item>
    
    <item>
      <title>golang错误处理(下)</title>
      <link>https://whuki.github.io/posts/go_error_2/</link>
      <pubDate>Tue, 06 Sep 2022 21:00:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/go_error_2/</guid>
      <description>错误处理优化 bufio.scan 在go的程序中常常会出现很多if err 代码，下面是两种减少这种代码的处理方式。 // 统计文件行数 func count(r io.Reader) (int, error) { var ( br = bufio.NewReader(r) lines int err error ) for { //</description>
    </item>
    
    <item>
      <title>golang错误处理(上)</title>
      <link>https://whuki.github.io/posts/go_error_1/</link>
      <pubDate>Mon, 05 Sep 2022 21:30:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/go_error_1/</guid>
      <description>Q: why golang的错误处理为什么这么设计？ 面向对象语言如java、c# 采用抛出异常的方式处理错误，这导致不管是什么样的错误都采用这种方式，所</description>
    </item>
    
    <item>
      <title>golang拷贝</title>
      <link>https://whuki.github.io/posts/golang_copy/</link>
      <pubDate>Sat, 03 Sep 2022 18:00:00 +0800</pubDate>
      
      <guid>https://whuki.github.io/posts/golang_copy/</guid>
      <description>浅拷贝 浅拷贝是指对地址的拷贝。 浅拷贝复制的是数据的指针地址，当数据发生变化的时候，被拷贝的数据也跟着发生变化。 golang引用类型的都是浅拷</description>
    </item>
    
    <item>
      <title>golang基础知识</title>
      <link>https://whuki.github.io/posts/go_error/</link>
      <pubDate>Thu, 25 Aug 2022 14:00:00 +0000</pubDate>
      
      <guid>https://whuki.github.io/posts/go_error/</guid>
      <description>golang 错误处理</description>
    </item>
    
    <item>
      <title>linux基础知识</title>
      <link>https://whuki.github.io/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 25 Aug 2022 14:00:00 +0000</pubDate>
      
      <guid>https://whuki.github.io/posts/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Linux 入门篇 / 根目录 boot 引导分区 系统启动使用一般 swap 交换分区 单独的一块分区作为内存使用 xfs 高性能日志文件系统 文件目录 /bin =》/usr/bin 二进制目录 直</description>
    </item>
    
  </channel>
</rss>
